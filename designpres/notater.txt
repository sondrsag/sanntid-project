Systemet skal være robust:
	Det må returnere til en trygg tilstand dersom det skjer noe feil.
	Ingen bestillinger kan tapes.
		Alle heisene skal ha all informasjon, slik at dersom en heis dør vil ikke de andre heisene tape informasjon
	Må kunne takle uforutsette hendelser.
		Software redundancy:
			Flere tråder kan gjøre samme utregning. Dersom det oppstår uenigheter vil det stemmes over hva som blir resultatet. Eller utregningen kan utføres på nytt.
		Hardware redundancy:
			Alle heisene gjør sine egne utregninger og sender resultatene til master. Master avgjør så hva som er det rette svaret ved avstemming. Eller ber om at utregningene skal gjøres på nytt

Vi må beskrive og begrunne:
	Nettverkstopologien
            Vi kunne representere data på en fornuftig måte og enkelt sende det over nettverk. Vi kan bruke https://github.com/json-c/json-c eller protobuf for å få til dette.
	Modulansvar:
		Kontroll:
			
			Master:
			
			Slave:
		
		Heiskontroll:
			
			Heisdriver:
			
		Heiskommunikasjon:
			
			Nettverk:
			
	
	Andre designissues
	
Vi må forstå svakheter ved designet og hvordan disse kan takles

Think about how want to move data around (reading buttons, network, setting motor & lights, state machines, etc). Do you think in a shared-variable way or a message-passing way? Will you be using concurrency at all?
How will you split into modules? Functions, objects, threads? Think about what modules you need, and how they need to interact. This is an iterative design process that will take you many tries to get "right" (if such a thing even exists!).
The networking part is often difficult. Can you find anything useful in the standard libraries, or other libraries?
The elevator driver is written in C. How do you interface with C code?
You may want to work from home, where you won't have an elevator. Does the language have a framework for making and running tests, or can you create one? Testing multithreaded code is especially difficult.

Feilhåndtering:
	Error mode merging: Vi behandler alle feil som den samme og restarter heisen for å løse problemet.
	Vi må passe på at alle som er i heisen slipper ut, før eller etter heisen restarter.
	
	I stedet for tradisjonell feilhåndtering, gjør vi acceptance tester i koden. Da kan vi oppdage om noe er feil, og i så fall restarte.
	Restarting = Backward error recovery  
	
	Static redundancy: Hvis det er uenighet la majoriteten bestemme. Dersom det ikke er noen majoritet, gjør beregning på nytt. Dersom det fortsatt ikke er noen majoritet: enten la master bestemme, eller restart alt.