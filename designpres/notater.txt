Systemet skal v�re robust:
	Det m� returnere til en trygg tilstand dersom det skjer noe feil.
	Ingen bestillinger kan tapes.
		Alle heisene skal ha all informasjon, slik at dersom en heis d�r vil ikke de andre heisene tape informasjon
	M� kunne takle uforutsette hendelser.
		Software redundancy:
			Flere tr�der kan gj�re samme utregning. Dersom det oppst�r uenigheter vil det stemmes over hva som blir resultatet. Eller utregningen kan utf�res p� nytt.
		Hardware redundancy:
			Alle heisene gj�r sine egne utregninger og sender resultatene til master. Master avgj�r s� hva som er det rette svaret ved avstemming. Eller ber om at utregningene skal gj�res p� nytt

Vi m� beskrive og begrunne:
	Nettverkstopologien
	Modulansvar:
		Driver:
			Styre heisen, lys og dør.
			Blir fortalt hvilken jobb som skal gjøres og har ansvar for å utføre jobber.
			Ansvar for å registrere og videresende input, og holde track på heisens status til enhver tid.
			Tar ingen avgjørelser. Jobber kun i "nu'et".

		Kontroll:
			Organiserer heisens jobber. Holder styr på hvilke jobber heisen skal utføre og når de skal utføres.
			Håndterer jobbetterspørsler fra kommunikasjonsmodulen og drivermodulen.
			Kontrollmodulen påvirkes ikke av om heisen er online eller offline.

		Kommunikasjon:
			Kommuniserer med andre heiser og beregner hvilke heiser som burde få hvilke jobber.
			Kommunikasjonsmodulen kan ha to forskjellige roller i heisnettverket:

			Master:
				Mottar fordelingsforslag fra de andre heisene og har overordnet ansvar for å bestemme hvilke
				heiser som får hvilke jobber.

			Slave:

		Nettverk:

	Andre designissues

Vi m� forst� svakheter ved designet og hvordan disse kan takles

Think about how want to move data around (reading buttons, network, setting motor & lights, state machines, etc). Do you think in a shared-variable way or a message-passing way? Will you be using concurrency at all?
How will you split into modules? Functions, objects, threads? Think about what modules you need, and how they need to interact. This is an iterative design process that will take you many tries to get "right" (if such a thing even exists!).
The networking part is often difficult. Can you find anything useful in the standard libraries, or other libraries?
The elevator driver is written in C. How do you interface with C code?
You may want to work from home, where you won't have an elevator. Does the language have a framework for making and running tests, or can you create one? Testing multithreaded code is especially difficult.
